
ELEMENTARY_STM32F107VCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028ec  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002ad0  08002ad0  00012ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b00  08002b00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b08  08002b08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b0c  08002b0c  00012b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002b1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002b1c  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b5d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001527  00000000  00000000  00028b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002a0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002aa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001139  00000000  00000000  0002b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009561  00000000  00000000  0002c411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4108  00000000  00000000  00035972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9a7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026fc  00000000  00000000  000e9ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002ab8 	.word	0x08002ab8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002ab8 	.word	0x08002ab8

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000234:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000238:	f000 b96e 	b.w	8000518 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	f040 8083 	bne.w	800036c <__udivmoddi4+0x118>
 8000266:	428a      	cmp	r2, r1
 8000268:	4617      	mov	r7, r2
 800026a:	d947      	bls.n	80002fc <__udivmoddi4+0xa8>
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	b14b      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000272:	f1c3 0120 	rsb	r1, r3, #32
 8000276:	fa05 fe03 	lsl.w	lr, r5, r3
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	409f      	lsls	r7, r3
 8000280:	ea41 0e0e 	orr.w	lr, r1, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	fbbe fcf8 	udiv	ip, lr, r8
 800028e:	fa1f f987 	uxth.w	r9, r7
 8000292:	fb08 e21c 	mls	r2, r8, ip, lr
 8000296:	fb0c f009 	mul.w	r0, ip, r9
 800029a:	0c21      	lsrs	r1, r4, #16
 800029c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80002aa:	f080 8118 	bcs.w	80004de <__udivmoddi4+0x28a>
 80002ae:	4290      	cmp	r0, r2
 80002b0:	f240 8115 	bls.w	80004de <__udivmoddi4+0x28a>
 80002b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b8:	443a      	add	r2, r7
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c0:	fb08 2210 	mls	r2, r8, r0, r2
 80002c4:	fb00 f109 	mul.w	r1, r0, r9
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a1      	cmp	r1, r4
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x92>
 80002d2:	193c      	adds	r4, r7, r4
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8103 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002dc:	42a1      	cmp	r1, r4
 80002de:	f240 8100 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002e2:	3802      	subs	r0, #2
 80002e4:	443c      	add	r4, r7
 80002e6:	1a64      	subs	r4, r4, r1
 80002e8:	2100      	movs	r1, #0
 80002ea:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa4>
 80002f0:	2200      	movs	r2, #0
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	e9c6 4200 	strd	r4, r2, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xac>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f382 	clz	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d14f      	bne.n	80003a8 <__udivmoddi4+0x154>
 8000308:	1a8d      	subs	r5, r1, r2
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000310:	fa1f f882 	uxth.w	r8, r2
 8000314:	fbb5 fcfe 	udiv	ip, r5, lr
 8000318:	fb0e 551c 	mls	r5, lr, ip, r5
 800031c:	fb08 f00c 	mul.w	r0, r8, ip
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000326:	42a8      	cmp	r0, r5
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0xe6>
 800032a:	197d      	adds	r5, r7, r5
 800032c:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0xe4>
 8000332:	42a8      	cmp	r0, r5
 8000334:	f200 80e9 	bhi.w	800050a <__udivmoddi4+0x2b6>
 8000338:	4694      	mov	ip, r2
 800033a:	1a2d      	subs	r5, r5, r0
 800033c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000340:	fb0e 5510 	mls	r5, lr, r0, r5
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	b2a4      	uxth	r4, r4
 800034a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034e:	45a0      	cmp	r8, r4
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x10e>
 8000352:	193c      	adds	r4, r7, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x10c>
 800035a:	45a0      	cmp	r8, r4
 800035c:	f200 80d9 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 0408 	sub.w	r4, r4, r8
 8000366:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036a:	e7c0      	b.n	80002ee <__udivmoddi4+0x9a>
 800036c:	428b      	cmp	r3, r1
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x12e>
 8000370:	2e00      	cmp	r6, #0
 8000372:	f000 80b1 	beq.w	80004d8 <__udivmoddi4+0x284>
 8000376:	2100      	movs	r1, #0
 8000378:	e9c6 0500 	strd	r0, r5, [r6]
 800037c:	4608      	mov	r0, r1
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14b      	bne.n	8000422 <__udivmoddi4+0x1ce>
 800038a:	42ab      	cmp	r3, r5
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0x140>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80b9 	bhi.w	8000506 <__udivmoddi4+0x2b2>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb65 0303 	sbc.w	r3, r5, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d0aa      	beq.n	80002f8 <__udivmoddi4+0xa4>
 80003a2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a6:	e7a7      	b.n	80002f8 <__udivmoddi4+0xa4>
 80003a8:	409f      	lsls	r7, r3
 80003aa:	f1c3 0220 	rsb	r2, r3, #32
 80003ae:	40d1      	lsrs	r1, r2
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	fa24 f202 	lsr.w	r2, r4, r2
 80003c4:	409d      	lsls	r5, r3
 80003c6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ca:	432a      	orrs	r2, r5
 80003cc:	0c15      	lsrs	r5, r2, #16
 80003ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d2:	45ac      	cmp	ip, r5
 80003d4:	fa04 f403 	lsl.w	r4, r4, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x19a>
 80003da:	197d      	adds	r5, r7, r5
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e0:	f080 808f 	bcs.w	8000502 <__udivmoddi4+0x2ae>
 80003e4:	45ac      	cmp	ip, r5
 80003e6:	f240 808c 	bls.w	8000502 <__udivmoddi4+0x2ae>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	eba5 050c 	sub.w	r5, r5, ip
 80003f2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003f6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fa:	fb01 f908 	mul.w	r9, r1, r8
 80003fe:	b295      	uxth	r5, r2
 8000400:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000404:	45a9      	cmp	r9, r5
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x1c4>
 8000408:	197d      	adds	r5, r7, r5
 800040a:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800040e:	d274      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 8000410:	45a9      	cmp	r9, r5
 8000412:	d972      	bls.n	80004fa <__udivmoddi4+0x2a6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	eba5 0509 	sub.w	r5, r5, r9
 800041c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000420:	e778      	b.n	8000314 <__udivmoddi4+0xc0>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa22 fc07 	lsr.w	ip, r2, r7
 800042c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000430:	fa25 f407 	lsr.w	r4, r5, r7
 8000434:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000438:	fbb4 f9fe 	udiv	r9, r4, lr
 800043c:	fa1f f88c 	uxth.w	r8, ip
 8000440:	fb0e 4419 	mls	r4, lr, r9, r4
 8000444:	fa20 f307 	lsr.w	r3, r0, r7
 8000448:	fb09 fa08 	mul.w	sl, r9, r8
 800044c:	408d      	lsls	r5, r1
 800044e:	431d      	orrs	r5, r3
 8000450:	0c2b      	lsrs	r3, r5, #16
 8000452:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000456:	45a2      	cmp	sl, r4
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 f301 	lsl.w	r3, r0, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0x222>
 8000462:	eb1c 0404 	adds.w	r4, ip, r4
 8000466:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800046a:	d248      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 800046c:	45a2      	cmp	sl, r4
 800046e:	d946      	bls.n	80004fe <__udivmoddi4+0x2aa>
 8000470:	f1a9 0902 	sub.w	r9, r9, #2
 8000474:	4464      	add	r4, ip
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	fbb4 f0fe 	udiv	r0, r4, lr
 800047e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000482:	fb00 fa08 	mul.w	sl, r0, r8
 8000486:	b2ad      	uxth	r5, r5
 8000488:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800048c:	45a2      	cmp	sl, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x24e>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000498:	d22d      	bcs.n	80004f6 <__udivmoddi4+0x2a2>
 800049a:	45a2      	cmp	sl, r4
 800049c:	d92b      	bls.n	80004f6 <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	eba4 040a 	sub.w	r4, r4, sl
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d319      	bcc.n	80004ea <__udivmoddi4+0x296>
 80004b6:	d016      	beq.n	80004e6 <__udivmoddi4+0x292>
 80004b8:	b15e      	cbz	r6, 80004d2 <__udivmoddi4+0x27e>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431f      	orrs	r7, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c6 7400 	strd	r7, r4, [r6]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e70c      	b.n	80002f8 <__udivmoddi4+0xa4>
 80004de:	468c      	mov	ip, r1
 80004e0:	e6eb      	b.n	80002ba <__udivmoddi4+0x66>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6ff      	b.n	80002e6 <__udivmoddi4+0x92>
 80004e6:	4543      	cmp	r3, r8
 80004e8:	d2e6      	bcs.n	80004b8 <__udivmoddi4+0x264>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb69 050c 	sbc.w	r5, r9, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7e0      	b.n	80004b8 <__udivmoddi4+0x264>
 80004f6:	4628      	mov	r0, r5
 80004f8:	e7d3      	b.n	80004a2 <__udivmoddi4+0x24e>
 80004fa:	4611      	mov	r1, r2
 80004fc:	e78c      	b.n	8000418 <__udivmoddi4+0x1c4>
 80004fe:	4681      	mov	r9, r0
 8000500:	e7b9      	b.n	8000476 <__udivmoddi4+0x222>
 8000502:	4608      	mov	r0, r1
 8000504:	e773      	b.n	80003ee <__udivmoddi4+0x19a>
 8000506:	4608      	mov	r0, r1
 8000508:	e749      	b.n	800039e <__udivmoddi4+0x14a>
 800050a:	f1ac 0c02 	sub.w	ip, ip, #2
 800050e:	443d      	add	r5, r7
 8000510:	e713      	b.n	800033a <__udivmoddi4+0xe6>
 8000512:	3802      	subs	r0, #2
 8000514:	443c      	add	r4, r7
 8000516:	e724      	b.n	8000362 <__udivmoddi4+0x10e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fbc6 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81a 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f998 	bl	800085c <MX_GPIO_Init>
  MX_TIM1_Init();
 800052c:	f000 f860 	bl	80005f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000530:	f000 f8e2 	bl	80006f8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000534:	f000 f938 	bl	80007a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x34>)
 800053a:	f001 fbc1 	bl	8001cc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x38>)
 8000540:	f001 fbbe 	bl	8001cc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8000544:	210c      	movs	r1, #12
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <main+0x3c>)
 8000548:	f001 fcb2 	bl	8001eb0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800054c:	e7fe      	b.n	800054c <main+0x30>
 800054e:	bf00      	nop
 8000550:	20000070 	.word	0x20000070
 8000554:	200000b8 	.word	0x200000b8
 8000558:	20000028 	.word	0x20000028

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2238      	movs	r2, #56	; 0x38
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fa9c 	bl	8002aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057e:	2302      	movs	r3, #2
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2310      	movs	r3, #16
 8000588:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000592:	2300      	movs	r3, #0
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000596:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 feb1 	bl	800130c <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005b0:	f000 fa00 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2101      	movs	r1, #1
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 f9b3 	bl	8001938 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d8:	f000 f9ec 	bl	80009b4 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <SystemClock_Config+0x90>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	42420070 	.word	0x42420070

080005f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b092      	sub	sp, #72	; 0x48
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]
 8000612:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2220      	movs	r2, #32
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fa44 	bl	8002aa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000620:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <MX_TIM1_Init+0x100>)
 8000622:	4a34      	ldr	r2, [pc, #208]	; (80006f4 <MX_TIM1_Init+0x104>)
 8000624:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 36;
 8000626:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <MX_TIM1_Init+0x100>)
 8000628:	2224      	movs	r2, #36	; 0x24
 800062a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062c:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <MX_TIM1_Init+0x100>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000632:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <MX_TIM1_Init+0x100>)
 8000634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000638:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <MX_TIM1_Init+0x100>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_TIM1_Init+0x100>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <MX_TIM1_Init+0x100>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800064c:	4828      	ldr	r0, [pc, #160]	; (80006f0 <MX_TIM1_Init+0x100>)
 800064e:	f001 fb91 	bl	8001d74 <HAL_TIM_OC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000658:	f000 f9ac 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065c:	2300      	movs	r3, #0
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000664:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000668:	4619      	mov	r1, r3
 800066a:	4821      	ldr	r0, [pc, #132]	; (80006f0 <MX_TIM1_Init+0x100>)
 800066c:	f002 f92e 	bl	80028cc <HAL_TIMEx_MasterConfigSynchronization>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000676:	f000 f99d 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000682:	2300      	movs	r3, #0
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000686:	2300      	movs	r3, #0
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800068a:	2300      	movs	r3, #0
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800068e:	2300      	movs	r3, #0
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000692:	2300      	movs	r3, #0
 8000694:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069a:	2200      	movs	r2, #0
 800069c:	4619      	mov	r1, r3
 800069e:	4814      	ldr	r0, [pc, #80]	; (80006f0 <MX_TIM1_Init+0x100>)
 80006a0:	f001 fdb8 	bl	8002214 <HAL_TIM_OC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80006aa:	f000 f983 	bl	80009b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4807      	ldr	r0, [pc, #28]	; (80006f0 <MX_TIM1_Init+0x100>)
 80006d2:	f002 f961 	bl	8002998 <HAL_TIMEx_ConfigBreakDeadTime>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80006dc:	f000 f96a 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <MX_TIM1_Init+0x100>)
 80006e2:	f000 f9f5 	bl	8000ad0 <HAL_TIM_MspPostInit>

}
 80006e6:	bf00      	nop
 80006e8:	3748      	adds	r7, #72	; 0x48
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000070 	.word	0x20000070
 80006f4:	40012c00 	.word	0x40012c00

080006f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_TIM2_Init+0xac>)
 800071c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000720:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_TIM2_Init+0xac>)
 8000724:	2224      	movs	r2, #36	; 0x24
 8000726:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_TIM2_Init+0xac>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_TIM2_Init+0xac>)
 8000730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000734:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_TIM2_Init+0xac>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_TIM2_Init+0xac>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000742:	4818      	ldr	r0, [pc, #96]	; (80007a4 <MX_TIM2_Init+0xac>)
 8000744:	f001 fb16 	bl	8001d74 <HAL_TIM_OC_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800074e:	f000 f931 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4619      	mov	r1, r3
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <MX_TIM2_Init+0xac>)
 8000762:	f002 f8b3 	bl	80028cc <HAL_TIMEx_MasterConfigSynchronization>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800076c:	f000 f922 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	4619      	mov	r1, r3
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <MX_TIM2_Init+0xac>)
 8000788:	f001 fd44 	bl	8002214 <HAL_TIM_OC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000792:	f000 f90f 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000796:	4803      	ldr	r0, [pc, #12]	; (80007a4 <MX_TIM2_Init+0xac>)
 8000798:	f000 f99a 	bl	8000ad0 <HAL_TIM_MspPostInit>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000b8 	.word	0x200000b8

080007a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_TIM4_Init+0xac>)
 80007cc:	4a22      	ldr	r2, [pc, #136]	; (8000858 <MX_TIM4_Init+0xb0>)
 80007ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36;
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_TIM4_Init+0xac>)
 80007d2:	2224      	movs	r2, #36	; 0x24
 80007d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_TIM4_Init+0xac>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_TIM4_Init+0xac>)
 80007de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_TIM4_Init+0xac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_TIM4_Init+0xac>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007f0:	4818      	ldr	r0, [pc, #96]	; (8000854 <MX_TIM4_Init+0xac>)
 80007f2:	f001 fb0e 	bl	8001e12 <HAL_TIM_PWM_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80007fc:	f000 f8da 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4619      	mov	r1, r3
 800080e:	4811      	ldr	r0, [pc, #68]	; (8000854 <MX_TIM4_Init+0xac>)
 8000810:	f002 f85c 	bl	80028cc <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800081a:	f000 f8cb 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081e:	2360      	movs	r3, #96	; 0x60
 8000820:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	220c      	movs	r2, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <MX_TIM4_Init+0xac>)
 8000838:	f001 fd44 	bl	80022c4 <HAL_TIM_PWM_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000842:	f000 f8b7 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <MX_TIM4_Init+0xac>)
 8000848:	f000 f942 	bl	8000ad0 <HAL_TIM_MspPostInit>

}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	; 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000028 	.word	0x20000028
 8000858:	40000800 	.word	0x40000800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b4a      	ldr	r3, [pc, #296]	; (800099c <MX_GPIO_Init+0x140>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a49      	ldr	r2, [pc, #292]	; (800099c <MX_GPIO_Init+0x140>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b47      	ldr	r3, [pc, #284]	; (800099c <MX_GPIO_Init+0x140>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	4b44      	ldr	r3, [pc, #272]	; (800099c <MX_GPIO_Init+0x140>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a43      	ldr	r2, [pc, #268]	; (800099c <MX_GPIO_Init+0x140>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b41      	ldr	r3, [pc, #260]	; (800099c <MX_GPIO_Init+0x140>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a0:	4b3e      	ldr	r3, [pc, #248]	; (800099c <MX_GPIO_Init+0x140>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a3d      	ldr	r2, [pc, #244]	; (800099c <MX_GPIO_Init+0x140>)
 80008a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b3b      	ldr	r3, [pc, #236]	; (800099c <MX_GPIO_Init+0x140>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b8:	4b38      	ldr	r3, [pc, #224]	; (800099c <MX_GPIO_Init+0x140>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a37      	ldr	r2, [pc, #220]	; (800099c <MX_GPIO_Init+0x140>)
 80008be:	f043 0320 	orr.w	r3, r3, #32
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b35      	ldr	r3, [pc, #212]	; (800099c <MX_GPIO_Init+0x140>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	4b32      	ldr	r3, [pc, #200]	; (800099c <MX_GPIO_Init+0x140>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a31      	ldr	r2, [pc, #196]	; (800099c <MX_GPIO_Init+0x140>)
 80008d6:	f043 0308 	orr.w	r3, r3, #8
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b2f      	ldr	r3, [pc, #188]	; (800099c <MX_GPIO_Init+0x140>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80008ee:	482c      	ldr	r0, [pc, #176]	; (80009a0 <MX_GPIO_Init+0x144>)
 80008f0:	f000 fcd2 	bl	8001298 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f8:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <MX_GPIO_Init+0x148>)
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	4619      	mov	r1, r3
 8000906:	4828      	ldr	r0, [pc, #160]	; (80009a8 <MX_GPIO_Init+0x14c>)
 8000908:	f000 fb42 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800090c:	2304      	movs	r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000910:	4b26      	ldr	r3, [pc, #152]	; (80009ac <MX_GPIO_Init+0x150>)
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4619      	mov	r1, r3
 800091e:	4822      	ldr	r0, [pc, #136]	; (80009a8 <MX_GPIO_Init+0x14c>)
 8000920:	f000 fb36 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0318 	add.w	r3, r7, #24
 8000934:	4619      	mov	r1, r3
 8000936:	481c      	ldr	r0, [pc, #112]	; (80009a8 <MX_GPIO_Init+0x14c>)
 8000938:	f000 fb2a 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800093c:	2310      	movs	r3, #16
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	4619      	mov	r1, r3
 800094e:	4818      	ldr	r0, [pc, #96]	; (80009b0 <MX_GPIO_Init+0x154>)
 8000950:	f000 fb1e 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000954:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000958:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2302      	movs	r3, #2
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000966:	f107 0318 	add.w	r3, r7, #24
 800096a:	4619      	mov	r1, r3
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_GPIO_Init+0x144>)
 800096e:	f000 fb0f 	bl	8000f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2007      	movs	r0, #7
 8000978:	f000 fad3 	bl	8000f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800097c:	2007      	movs	r0, #7
 800097e:	f000 faec 	bl	8000f5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2008      	movs	r0, #8
 8000988:	f000 facb 	bl	8000f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800098c:	2008      	movs	r0, #8
 800098e:	f000 fae4 	bl	8000f5a <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000
 80009a0:	40011800 	.word	0x40011800
 80009a4:	10110000 	.word	0x10110000
 80009a8:	40010800 	.word	0x40010800
 80009ac:	10210000 	.word	0x10210000
 80009b0:	40011000 	.word	0x40011000

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_MspInit+0x5c>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <HAL_MspInit+0x5c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6193      	str	r3, [r2, #24]
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_MspInit+0x5c>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_MspInit+0x5c>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_MspInit+0x5c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_MspInit+0x5c>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_MspInit+0x60>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_MspInit+0x60>)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010000 	.word	0x40010000

08000a24 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <HAL_TIM_OC_MspInit+0x68>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d10c      	bne.n	8000a50 <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_TIM_OC_MspInit+0x6c>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <HAL_TIM_OC_MspInit+0x6c>)
 8000a3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_TIM_OC_MspInit+0x6c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a4e:	e018      	b.n	8000a82 <HAL_TIM_OC_MspInit+0x5e>
  else if(htim_oc->Instance==TIM2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a58:	d113      	bne.n	8000a82 <HAL_TIM_OC_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_TIM_OC_MspInit+0x6c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <HAL_TIM_OC_MspInit+0x6c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_TIM_OC_MspInit+0x6c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	201c      	movs	r0, #28
 8000a78:	f000 fa53 	bl	8000f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a7c:	201c      	movs	r0, #28
 8000a7e:	f000 fa6c 	bl	8000f5a <HAL_NVIC_EnableIRQ>
}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40012c00 	.word	0x40012c00
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <HAL_TIM_PWM_MspInit+0x34>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d10b      	bne.n	8000abe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_TIM_PWM_MspInit+0x38>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_TIM_PWM_MspInit+0x38>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	61d3      	str	r3, [r2, #28]
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_TIM_PWM_MspInit+0x38>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	40000800 	.word	0x40000800
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a35      	ldr	r2, [pc, #212]	; (8000bc0 <HAL_TIM_MspPostInit+0xf0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d119      	bne.n	8000b24 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <HAL_TIM_MspPostInit+0xf4>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a33      	ldr	r2, [pc, #204]	; (8000bc4 <HAL_TIM_MspPostInit+0xf4>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <HAL_TIM_MspPostInit+0xf4>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2302      	movs	r3, #2
 8000b14:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <HAL_TIM_MspPostInit+0xf8>)
 8000b1e:	f000 fa37 	bl	8000f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b22:	e049      	b.n	8000bb8 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b2c:	d118      	bne.n	8000b60 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <HAL_TIM_MspPostInit+0xf4>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a24      	ldr	r2, [pc, #144]	; (8000bc4 <HAL_TIM_MspPostInit+0xf4>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6193      	str	r3, [r2, #24]
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <HAL_TIM_MspPostInit+0xf4>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	481b      	ldr	r0, [pc, #108]	; (8000bc8 <HAL_TIM_MspPostInit+0xf8>)
 8000b5a:	f000 fa19 	bl	8000f90 <HAL_GPIO_Init>
}
 8000b5e:	e02b      	b.n	8000bb8 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_TIM_MspPostInit+0xfc>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d126      	bne.n	8000bb8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_TIM_MspPostInit+0xf4>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <HAL_TIM_MspPostInit+0xf4>)
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_TIM_MspPostInit+0xf4>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f003 0320 	and.w	r3, r3, #32
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <HAL_TIM_MspPostInit+0x100>)
 8000b98:	f000 f9fa 	bl	8000f90 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_TIM_MspPostInit+0x104>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_TIM_MspPostInit+0x104>)
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	6053      	str	r3, [r2, #4]
}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40012c00 	.word	0x40012c00
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	40000800 	.word	0x40000800
 8000bd0:	40011400 	.word	0x40011400
 8000bd4:	40010000 	.word	0x40010000

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1e:	f000 f88d 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f000 fb4c 	bl	80012c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c38:	2004      	movs	r0, #4
 8000c3a:	f000 fb45 	bl	80012c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <TIM2_IRQHandler+0x10>)
 8000c4a:	f001 f9db 	bl	8002004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000b8 	.word	0x200000b8

08000c58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c8a:	f7ff ffe5 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f001 fee7 	bl	8002a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c92:	f7ff fc43 	bl	800051c <main>
  bx lr
 8000c96:	4770      	bx	lr
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ca0:	08002b10 	.word	0x08002b10
  ldr r2, =_sbss
 8000ca4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca8:	20000104 	.word	0x20000104

08000cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_2_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x28>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x28>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f923 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe78 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f93b 	bl	8000f76 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d18:	f000 f903 	bl	8000f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_IncTick+0x1c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x20>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <HAL_IncTick+0x20>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000100 	.word	0x20000100

08000d60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b02      	ldr	r3, [pc, #8]	; (8000d70 <HAL_GetTick+0x10>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	20000100 	.word	0x20000100

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4906      	ldr	r1, [pc, #24]	; (8000e0c <__NVIC_EnableIRQ+0x34>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eec:	f7ff ff90 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff2d 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff42 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff90 	bl	8000e64 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5f 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff35 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffa2 	bl	8000ec8 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b08b      	sub	sp, #44	; 0x2c
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	e169      	b.n	8001278 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8158 	bne.w	8001272 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	4a9a      	ldr	r2, [pc, #616]	; (8001230 <HAL_GPIO_Init+0x2a0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d05e      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fcc:	4a98      	ldr	r2, [pc, #608]	; (8001230 <HAL_GPIO_Init+0x2a0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d875      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fd2:	4a98      	ldr	r2, [pc, #608]	; (8001234 <HAL_GPIO_Init+0x2a4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d058      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fd8:	4a96      	ldr	r2, [pc, #600]	; (8001234 <HAL_GPIO_Init+0x2a4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d86f      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fde:	4a96      	ldr	r2, [pc, #600]	; (8001238 <HAL_GPIO_Init+0x2a8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d052      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fe4:	4a94      	ldr	r2, [pc, #592]	; (8001238 <HAL_GPIO_Init+0x2a8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d869      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fea:	4a94      	ldr	r2, [pc, #592]	; (800123c <HAL_GPIO_Init+0x2ac>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000ff0:	4a92      	ldr	r2, [pc, #584]	; (800123c <HAL_GPIO_Init+0x2ac>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d863      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000ff6:	4a92      	ldr	r2, [pc, #584]	; (8001240 <HAL_GPIO_Init+0x2b0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d046      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000ffc:	4a90      	ldr	r2, [pc, #576]	; (8001240 <HAL_GPIO_Init+0x2b0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d85d      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8001002:	2b12      	cmp	r3, #18
 8001004:	d82a      	bhi.n	800105c <HAL_GPIO_Init+0xcc>
 8001006:	2b12      	cmp	r3, #18
 8001008:	d859      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 800100a:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <HAL_GPIO_Init+0x80>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	0800108b 	.word	0x0800108b
 8001014:	08001065 	.word	0x08001065
 8001018:	08001077 	.word	0x08001077
 800101c:	080010b9 	.word	0x080010b9
 8001020:	080010bf 	.word	0x080010bf
 8001024:	080010bf 	.word	0x080010bf
 8001028:	080010bf 	.word	0x080010bf
 800102c:	080010bf 	.word	0x080010bf
 8001030:	080010bf 	.word	0x080010bf
 8001034:	080010bf 	.word	0x080010bf
 8001038:	080010bf 	.word	0x080010bf
 800103c:	080010bf 	.word	0x080010bf
 8001040:	080010bf 	.word	0x080010bf
 8001044:	080010bf 	.word	0x080010bf
 8001048:	080010bf 	.word	0x080010bf
 800104c:	080010bf 	.word	0x080010bf
 8001050:	080010bf 	.word	0x080010bf
 8001054:	0800106d 	.word	0x0800106d
 8001058:	08001081 	.word	0x08001081
 800105c:	4a79      	ldr	r2, [pc, #484]	; (8001244 <HAL_GPIO_Init+0x2b4>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001062:	e02c      	b.n	80010be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e029      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	3304      	adds	r3, #4
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e024      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	3308      	adds	r3, #8
 800107c:	623b      	str	r3, [r7, #32]
          break;
 800107e:	e01f      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	330c      	adds	r3, #12
 8001086:	623b      	str	r3, [r7, #32]
          break;
 8001088:	e01a      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001092:	2304      	movs	r3, #4
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e013      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d105      	bne.n	80010ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a0:	2308      	movs	r3, #8
 80010a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	611a      	str	r2, [r3, #16]
          break;
 80010aa:	e009      	b.n	80010c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ac:	2308      	movs	r3, #8
 80010ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	615a      	str	r2, [r3, #20]
          break;
 80010b6:	e003      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
          break;
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          break;
 80010be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2bff      	cmp	r3, #255	; 0xff
 80010c4:	d801      	bhi.n	80010ca <HAL_GPIO_Init+0x13a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	e001      	b.n	80010ce <HAL_GPIO_Init+0x13e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3304      	adds	r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2bff      	cmp	r3, #255	; 0xff
 80010d4:	d802      	bhi.n	80010dc <HAL_GPIO_Init+0x14c>
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x152>
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	3b08      	subs	r3, #8
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	210f      	movs	r1, #15
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	6a39      	ldr	r1, [r7, #32]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80b1 	beq.w	8001272 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001110:	4b4d      	ldr	r3, [pc, #308]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a4c      	ldr	r2, [pc, #304]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001128:	4a48      	ldr	r2, [pc, #288]	; (800124c <HAL_GPIO_Init+0x2bc>)
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001134:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220f      	movs	r2, #15
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a40      	ldr	r2, [pc, #256]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d013      	beq.n	800117c <HAL_GPIO_Init+0x1ec>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3f      	ldr	r2, [pc, #252]	; (8001254 <HAL_GPIO_Init+0x2c4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d00d      	beq.n	8001178 <HAL_GPIO_Init+0x1e8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a3e      	ldr	r2, [pc, #248]	; (8001258 <HAL_GPIO_Init+0x2c8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d007      	beq.n	8001174 <HAL_GPIO_Init+0x1e4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3d      	ldr	r2, [pc, #244]	; (800125c <HAL_GPIO_Init+0x2cc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d101      	bne.n	8001170 <HAL_GPIO_Init+0x1e0>
 800116c:	2303      	movs	r3, #3
 800116e:	e006      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001170:	2304      	movs	r3, #4
 8001172:	e004      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001174:	2302      	movs	r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 800117c:	2300      	movs	r3, #0
 800117e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4093      	lsls	r3, r2
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800118e:	492f      	ldr	r1, [pc, #188]	; (800124c <HAL_GPIO_Init+0x2bc>)
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	492c      	ldr	r1, [pc, #176]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	43db      	mvns	r3, r3
 80011be:	4928      	ldr	r1, [pc, #160]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4922      	ldr	r1, [pc, #136]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	491e      	ldr	r1, [pc, #120]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	4918      	ldr	r1, [pc, #96]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	4914      	ldr	r1, [pc, #80]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d021      	beq.n	8001264 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	490e      	ldr	r1, [pc, #56]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	60cb      	str	r3, [r1, #12]
 800122c:	e021      	b.n	8001272 <HAL_GPIO_Init+0x2e2>
 800122e:	bf00      	nop
 8001230:	10320000 	.word	0x10320000
 8001234:	10310000 	.word	0x10310000
 8001238:	10220000 	.word	0x10220000
 800123c:	10210000 	.word	0x10210000
 8001240:	10120000 	.word	0x10120000
 8001244:	10110000 	.word	0x10110000
 8001248:	40021000 	.word	0x40021000
 800124c:	40010000 	.word	0x40010000
 8001250:	40010800 	.word	0x40010800
 8001254:	40010c00 	.word	0x40010c00
 8001258:	40011000 	.word	0x40011000
 800125c:	40011400 	.word	0x40011400
 8001260:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_GPIO_Init+0x304>)
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	43db      	mvns	r3, r3
 800126c:	4909      	ldr	r1, [pc, #36]	; (8001294 <HAL_GPIO_Init+0x304>)
 800126e:	4013      	ands	r3, r2
 8001270:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	3301      	adds	r3, #1
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	fa22 f303 	lsr.w	r3, r2, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	f47f ae8e 	bne.w	8000fa4 <HAL_GPIO_Init+0x14>
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	372c      	adds	r7, #44	; 0x2c
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b4:	e003      	b.n	80012be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	041a      	lsls	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	611a      	str	r2, [r3, #16]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	4013      	ands	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f806 	bl	80012f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e304      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8087 	beq.w	800143a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800132c:	4b92      	ldr	r3, [pc, #584]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b04      	cmp	r3, #4
 8001336:	d00c      	beq.n	8001352 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001338:	4b8f      	ldr	r3, [pc, #572]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	2b08      	cmp	r3, #8
 8001342:	d112      	bne.n	800136a <HAL_RCC_OscConfig+0x5e>
 8001344:	4b8c      	ldr	r3, [pc, #560]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001350:	d10b      	bne.n	800136a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001352:	4b89      	ldr	r3, [pc, #548]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d06c      	beq.n	8001438 <HAL_RCC_OscConfig+0x12c>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d168      	bne.n	8001438 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e2de      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x76>
 8001374:	4b80      	ldr	r3, [pc, #512]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a7f      	ldr	r2, [pc, #508]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e02e      	b.n	80013e0 <HAL_RCC_OscConfig+0xd4>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x98>
 800138a:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a7a      	ldr	r2, [pc, #488]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b78      	ldr	r3, [pc, #480]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a77      	ldr	r2, [pc, #476]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e01d      	b.n	80013e0 <HAL_RCC_OscConfig+0xd4>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0xbc>
 80013ae:	4b72      	ldr	r3, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a71      	ldr	r2, [pc, #452]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6e      	ldr	r2, [pc, #440]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0xd4>
 80013c8:	4b6b      	ldr	r3, [pc, #428]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a6a      	ldr	r2, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b68      	ldr	r3, [pc, #416]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a67      	ldr	r2, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fcba 	bl	8000d60 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fcb6 	bl	8000d60 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e292      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0xe4>
 800140e:	e014      	b.n	800143a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fca6 	bl	8000d60 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fca2 	bl	8000d60 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e27e      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	4b53      	ldr	r3, [pc, #332]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x10c>
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d063      	beq.n	800150e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001446:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001452:	4b49      	ldr	r3, [pc, #292]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b08      	cmp	r3, #8
 800145c:	d11c      	bne.n	8001498 <HAL_RCC_OscConfig+0x18c>
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d116      	bne.n	8001498 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x176>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d001      	beq.n	8001482 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e252      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4939      	ldr	r1, [pc, #228]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	e03a      	b.n	800150e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a0:	4b36      	ldr	r3, [pc, #216]	; (800157c <HAL_RCC_OscConfig+0x270>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fc5b 	bl	8000d60 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fc57 	bl	8000d60 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e233      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4927      	ldr	r1, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e015      	b.n	800150e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_RCC_OscConfig+0x270>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fc3a 	bl	8000d60 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f0:	f7ff fc36 	bl	8000d60 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e212      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d03a      	beq.n	8001590 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d019      	beq.n	8001556 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_RCC_OscConfig+0x274>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff fc1a 	bl	8000d60 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff fc16 	bl	8000d60 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1f2      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f000 fb98 	bl	8001c84 <RCC_Delay>
 8001554:	e01c      	b.n	8001590 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_RCC_OscConfig+0x274>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff fc00 	bl	8000d60 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001562:	e00f      	b.n	8001584 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff fbfc 	bl	8000d60 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d908      	bls.n	8001584 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e1d8      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	42420000 	.word	0x42420000
 8001580:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	4b9b      	ldr	r3, [pc, #620]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e9      	bne.n	8001564 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a6 	beq.w	80016ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a2:	4b94      	ldr	r3, [pc, #592]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10d      	bne.n	80015ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b91      	ldr	r3, [pc, #580]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a90      	ldr	r2, [pc, #576]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b8e      	ldr	r3, [pc, #568]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b8b      	ldr	r3, [pc, #556]	; (80017f8 <HAL_RCC_OscConfig+0x4ec>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d118      	bne.n	8001608 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d6:	4b88      	ldr	r3, [pc, #544]	; (80017f8 <HAL_RCC_OscConfig+0x4ec>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a87      	ldr	r2, [pc, #540]	; (80017f8 <HAL_RCC_OscConfig+0x4ec>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fbbd 	bl	8000d60 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ea:	f7ff fbb9 	bl	8000d60 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b64      	cmp	r3, #100	; 0x64
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e195      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	4b7e      	ldr	r3, [pc, #504]	; (80017f8 <HAL_RCC_OscConfig+0x4ec>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x312>
 8001610:	4b78      	ldr	r3, [pc, #480]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a77      	ldr	r2, [pc, #476]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	e02d      	b.n	800167a <HAL_RCC_OscConfig+0x36e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x334>
 8001626:	4b73      	ldr	r3, [pc, #460]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a72      	ldr	r2, [pc, #456]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	4b70      	ldr	r3, [pc, #448]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a6f      	ldr	r2, [pc, #444]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	e01c      	b.n	800167a <HAL_RCC_OscConfig+0x36e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	2b05      	cmp	r3, #5
 8001646:	d10c      	bne.n	8001662 <HAL_RCC_OscConfig+0x356>
 8001648:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a69      	ldr	r2, [pc, #420]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6213      	str	r3, [r2, #32]
 8001654:	4b67      	ldr	r3, [pc, #412]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a66      	ldr	r2, [pc, #408]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	e00b      	b.n	800167a <HAL_RCC_OscConfig+0x36e>
 8001662:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a63      	ldr	r2, [pc, #396]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6213      	str	r3, [r2, #32]
 800166e:	4b61      	ldr	r3, [pc, #388]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a60      	ldr	r2, [pc, #384]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d015      	beq.n	80016ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff fb6d 	bl	8000d60 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fb69 	bl	8000d60 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e143      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a0:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ee      	beq.n	800168a <HAL_RCC_OscConfig+0x37e>
 80016ac:	e014      	b.n	80016d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fb57 	bl	8000d60 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff fb53 	bl	8000d60 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e12d      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ee      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d105      	bne.n	80016ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016de:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a44      	ldr	r2, [pc, #272]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80016e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 808c 	beq.w	800180c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80016f4:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001700:	d10e      	bne.n	8001720 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001702:	4b3c      	ldr	r3, [pc, #240]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800170a:	2b08      	cmp	r3, #8
 800170c:	d108      	bne.n	8001720 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800170e:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171a:	d101      	bne.n	8001720 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e103      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	2b02      	cmp	r3, #2
 8001726:	d14e      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d009      	beq.n	8001748 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0ef      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001748:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <HAL_RCC_OscConfig+0x4f0>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fb07 	bl	8000d60 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001756:	f7ff fb03 	bl	8000d60 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b64      	cmp	r3, #100	; 0x64
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e0df      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	491c      	ldr	r1, [pc, #112]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001782:	4313      	orrs	r3, r2
 8001784:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4918      	ldr	r1, [pc, #96]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 8001794:	4313      	orrs	r3, r2
 8001796:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_RCC_OscConfig+0x4f0>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff fadf 	bl	8000d60 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80017a6:	f7ff fadb 	bl	8000d60 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b64      	cmp	r3, #100	; 0x64
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0b7      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x49a>
 80017c4:	e022      	b.n	800180c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_RCC_OscConfig+0x4e8>)
 80017cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_RCC_OscConfig+0x4f0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fac2 	bl	8000d60 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80017de:	e00f      	b.n	8001800 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80017e0:	f7ff fabe 	bl	8000d60 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d908      	bls.n	8001800 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e09a      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40007000 	.word	0x40007000
 80017fc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001800:	4b4b      	ldr	r3, [pc, #300]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1e9      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8088 	beq.w	8001926 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001816:	4b46      	ldr	r3, [pc, #280]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d068      	beq.n	80018f4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d14d      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b42      	ldr	r3, [pc, #264]	; (8001934 <HAL_RCC_OscConfig+0x628>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fa96 	bl	8000d60 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff fa92 	bl	8000d60 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e06e      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184a:	4b39      	ldr	r3, [pc, #228]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185e:	d10f      	bne.n	8001880 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001860:	4b33      	ldr	r3, [pc, #204]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 8001862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4931      	ldr	r1, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 800186a:	4313      	orrs	r3, r2
 800186c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800186e:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	f023 020f 	bic.w	r2, r3, #15
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	492d      	ldr	r1, [pc, #180]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 800187c:	4313      	orrs	r3, r2
 800187e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	430b      	orrs	r3, r1
 8001892:	4927      	ldr	r1, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_RCC_OscConfig+0x628>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fa5f 	bl	8000d60 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff fa5b 	bl	8000d60 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e037      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x59a>
 80018c4:	e02f      	b.n	8001926 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x628>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa48 	bl	8000d60 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fa44 	bl	8000d60 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e020      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x5c8>
 80018f2:	e018      	b.n	8001926 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e013      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_OscConfig+0x624>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	429a      	cmp	r2, r3
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	42420060 	.word	0x42420060

08001938 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0d0      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800194c:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d910      	bls.n	800197c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 0207 	bic.w	r2, r3, #7
 8001962:	4965      	ldr	r1, [pc, #404]	; (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b63      	ldr	r3, [pc, #396]	; (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0b8      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001994:	4b59      	ldr	r3, [pc, #356]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a58      	ldr	r2, [pc, #352]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800199e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ac:	4b53      	ldr	r3, [pc, #332]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a52      	ldr	r2, [pc, #328]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b8:	4b50      	ldr	r3, [pc, #320]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	494d      	ldr	r1, [pc, #308]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d040      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019de:	4b47      	ldr	r3, [pc, #284]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d115      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e07f      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f6:	4b41      	ldr	r3, [pc, #260]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e073      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e06b      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f023 0203 	bic.w	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4936      	ldr	r1, [pc, #216]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a28:	f7ff f99a 	bl	8000d60 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a30:	f7ff f996 	bl	8000d60 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e053      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 020c 	and.w	r2, r3, #12
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d1eb      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d210      	bcs.n	8001a88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0207 	bic.w	r2, r3, #7
 8001a6e:	4922      	ldr	r1, [pc, #136]	; (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e032      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4916      	ldr	r1, [pc, #88]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	490e      	ldr	r1, [pc, #56]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ac6:	f000 f821 	bl	8001b0c <HAL_RCC_GetSysClockFreq>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	490a      	ldr	r1, [pc, #40]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad8:	5ccb      	ldrb	r3, [r1, r3]
 8001ada:	fa22 f303 	lsr.w	r3, r2, r3
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x1cc>)
 8001ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_RCC_ClockConfig+0x1d0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f8f8 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40022000 	.word	0x40022000
 8001afc:	40021000 	.word	0x40021000
 8001b00:	08002af0 	.word	0x08002af0
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000004 	.word	0x20000004

08001b0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0e:	b091      	sub	sp, #68	; 0x44
 8001b10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001b12:	4b56      	ldr	r3, [pc, #344]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x160>)
 8001b14:	f107 0414 	add.w	r4, r7, #20
 8001b18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b1a:	c407      	stmia	r4!, {r0, r1, r2}
 8001b1c:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001b1e:	4b54      	ldr	r3, [pc, #336]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x164>)
 8001b20:	1d3c      	adds	r4, r7, #4
 8001b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b30:	2300      	movs	r3, #0
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b44:	4b4b      	ldr	r3, [pc, #300]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d002      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x4e>
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d003      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x54>
 8001b58:	e080      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b5e:	e080      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b62:	0c9b      	lsrs	r3, r3, #18
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d066      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d044      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001b9e:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	3301      	adds	r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001bac:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x168>)
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f04f 0100 	mov.w	r1, #0
 8001bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	fb02 f501 	mul.w	r5, r2, r1
 8001bce:	fb00 f403 	mul.w	r4, r0, r3
 8001bd2:	442c      	add	r4, r5
 8001bd4:	fba0 2302 	umull	r2, r3, r0, r2
 8001bd8:	18e1      	adds	r1, r4, r3
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4926      	ldr	r1, [pc, #152]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001bde:	fb01 f003 	mul.w	r0, r1, r3
 8001be2:	2100      	movs	r1, #0
 8001be4:	fb01 f102 	mul.w	r1, r1, r2
 8001be8:	4401      	add	r1, r0
 8001bea:	4823      	ldr	r0, [pc, #140]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001bec:	fba2 4500 	umull	r4, r5, r2, r0
 8001bf0:	194b      	adds	r3, r1, r5
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	fb02 fc01 	mul.w	ip, r2, r1
 8001c08:	fb00 f603 	mul.w	r6, r0, r3
 8001c0c:	4466      	add	r6, ip
 8001c0e:	fba0 2302 	umull	r2, r3, r0, r2
 8001c12:	18f1      	adds	r1, r6, r3
 8001c14:	460b      	mov	r3, r1
 8001c16:	4620      	mov	r0, r4
 8001c18:	4629      	mov	r1, r5
 8001c1a:	f7fe fb03 	bl	8000224 <__aeabi_uldivmod>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4613      	mov	r3, r2
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c26:	e007      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2a:	4a13      	ldr	r2, [pc, #76]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001c2c:	fb02 f203 	mul.w	r2, r2, r3
 8001c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001c38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d108      	bne.n	8001c56 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8001c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c4a:	e004      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x170>)
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8001c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c5a:	e002      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x174>)
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3744      	adds	r7, #68	; 0x44
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c6c:	08002ad0 	.word	0x08002ad0
 8001c70:	08002ae0 	.word	0x08002ae0
 8001c74:	40021000 	.word	0x40021000
 8001c78:	017d7840 	.word	0x017d7840
 8001c7c:	003d0900 	.word	0x003d0900
 8001c80:	007a1200 	.word	0x007a1200

08001c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <RCC_Delay+0x34>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <RCC_Delay+0x38>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	0a5b      	lsrs	r3, r3, #9
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ca0:	bf00      	nop
  }
  while (Delay --);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1e5a      	subs	r2, r3, #1
 8001ca6:	60fa      	str	r2, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f9      	bne.n	8001ca0 <RCC_Delay+0x1c>
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	10624dd3 	.word	0x10624dd3

08001cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d001      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e03f      	b.n	8001d58 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <HAL_TIM_Base_Start_IT+0xa4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_TIM_Base_Start_IT+0x62>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d02:	d00e      	beq.n	8001d22 <HAL_TIM_Base_Start_IT+0x62>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <HAL_TIM_Base_Start_IT+0xa8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d009      	beq.n	8001d22 <HAL_TIM_Base_Start_IT+0x62>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <HAL_TIM_Base_Start_IT+0xac>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d004      	beq.n	8001d22 <HAL_TIM_Base_Start_IT+0x62>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d111      	bne.n	8001d46 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b06      	cmp	r3, #6
 8001d32:	d010      	beq.n	8001d56 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d44:	e007      	b.n	8001d56 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40012c00 	.word	0x40012c00
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40000800 	.word	0x40000800
 8001d70:	40000c00 	.word	0x40000c00

08001d74 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e041      	b.n	8001e0a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fe42 	bl	8000a24 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3304      	adds	r3, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f000 fb72 	bl	800249c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e041      	b.n	8001ea8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d106      	bne.n	8001e3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7fe fe2b 	bl	8000a94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2202      	movs	r2, #2
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f000 fb23 	bl	800249c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_TIM_PWM_Start+0x24>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	bf14      	ite	ne
 8001ecc:	2301      	movne	r3, #1
 8001ece:	2300      	moveq	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	e022      	b.n	8001f1a <HAL_TIM_PWM_Start+0x6a>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d109      	bne.n	8001eee <HAL_TIM_PWM_Start+0x3e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	bf14      	ite	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	2300      	moveq	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	e015      	b.n	8001f1a <HAL_TIM_PWM_Start+0x6a>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d109      	bne.n	8001f08 <HAL_TIM_PWM_Start+0x58>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	e008      	b.n	8001f1a <HAL_TIM_PWM_Start+0x6a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	bf14      	ite	ne
 8001f14:	2301      	movne	r3, #1
 8001f16:	2300      	moveq	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e063      	b.n	8001fea <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d104      	bne.n	8001f32 <HAL_TIM_PWM_Start+0x82>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f30:	e013      	b.n	8001f5a <HAL_TIM_PWM_Start+0xaa>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d104      	bne.n	8001f42 <HAL_TIM_PWM_Start+0x92>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f40:	e00b      	b.n	8001f5a <HAL_TIM_PWM_Start+0xaa>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d104      	bne.n	8001f52 <HAL_TIM_PWM_Start+0xa2>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f50:	e003      	b.n	8001f5a <HAL_TIM_PWM_Start+0xaa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	6839      	ldr	r1, [r7, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fc8e 	bl	8002884 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <HAL_TIM_PWM_Start+0x144>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d107      	bne.n	8001f82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_TIM_PWM_Start+0x144>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_TIM_PWM_Start+0x104>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f94:	d00e      	beq.n	8001fb4 <HAL_TIM_PWM_Start+0x104>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_TIM_PWM_Start+0x148>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_TIM_PWM_Start+0x104>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <HAL_TIM_PWM_Start+0x14c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_TIM_PWM_Start+0x104>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a14      	ldr	r2, [pc, #80]	; (8002000 <HAL_TIM_PWM_Start+0x150>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d111      	bne.n	8001fd8 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d010      	beq.n	8001fe8 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd6:	e007      	b.n	8001fe8 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40012c00 	.word	0x40012c00
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	40000800 	.word	0x40000800
 8002000:	40000c00 	.word	0x40000c00

08002004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b02      	cmp	r3, #2
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b02      	cmp	r3, #2
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0202 	mvn.w	r2, #2
 8002030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fa0c 	bl	8002464 <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f9ff 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fa0e 	bl	8002476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b04      	cmp	r3, #4
 800206c:	d122      	bne.n	80020b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b04      	cmp	r3, #4
 800207a:	d11b      	bne.n	80020b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0204 	mvn.w	r2, #4
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f9e2 	bl	8002464 <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f9d5 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f9e4 	bl	8002476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d122      	bne.n	8002108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d11b      	bne.n	8002108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0208 	mvn.w	r2, #8
 80020d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2204      	movs	r2, #4
 80020de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f9b8 	bl	8002464 <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f9ab 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f9ba 	bl	8002476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b10      	cmp	r3, #16
 8002114:	d122      	bne.n	800215c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b10      	cmp	r3, #16
 8002122:	d11b      	bne.n	800215c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0210 	mvn.w	r2, #16
 800212c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2208      	movs	r2, #8
 8002132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f98e 	bl	8002464 <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f981 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f990 	bl	8002476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10e      	bne.n	8002188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d107      	bne.n	8002188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0201 	mvn.w	r2, #1
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f95c 	bl	8002440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	2b80      	cmp	r3, #128	; 0x80
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	2b80      	cmp	r3, #128	; 0x80
 80021a2:	d107      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fc4c 	bl	8002a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	2b40      	cmp	r3, #64	; 0x40
 80021c0:	d10e      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d107      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f954 	bl	8002488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d107      	bne.n	800220c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0220 	mvn.w	r2, #32
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fc17 	bl	8002a3a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_TIM_OC_ConfigChannel+0x1a>
 800222a:	2302      	movs	r3, #2
 800222c:	e046      	b.n	80022bc <HAL_TIM_OC_ConfigChannel+0xa8>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0c      	cmp	r3, #12
 800223a:	d839      	bhi.n	80022b0 <HAL_TIM_OC_ConfigChannel+0x9c>
 800223c:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <HAL_TIM_OC_ConfigChannel+0x30>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002279 	.word	0x08002279
 8002248:	080022b1 	.word	0x080022b1
 800224c:	080022b1 	.word	0x080022b1
 8002250:	080022b1 	.word	0x080022b1
 8002254:	08002287 	.word	0x08002287
 8002258:	080022b1 	.word	0x080022b1
 800225c:	080022b1 	.word	0x080022b1
 8002260:	080022b1 	.word	0x080022b1
 8002264:	08002295 	.word	0x08002295
 8002268:	080022b1 	.word	0x080022b1
 800226c:	080022b1 	.word	0x080022b1
 8002270:	080022b1 	.word	0x080022b1
 8002274:	080022a3 	.word	0x080022a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f978 	bl	8002574 <TIM_OC1_SetConfig>
      break;
 8002284:	e015      	b.n	80022b2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68b9      	ldr	r1, [r7, #8]
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f9d7 	bl	8002640 <TIM_OC2_SetConfig>
      break;
 8002292:	e00e      	b.n	80022b2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fa3a 	bl	8002714 <TIM_OC3_SetConfig>
      break;
 80022a0:	e007      	b.n	80022b2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fa9d 	bl	80027e8 <TIM_OC4_SetConfig>
      break;
 80022ae:	e000      	b.n	80022b2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80022b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0ac      	b.n	8002438 <HAL_TIM_PWM_ConfigChannel+0x174>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	f200 809f 	bhi.w	800242c <HAL_TIM_PWM_ConfigChannel+0x168>
 80022ee:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80022f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f4:	08002329 	.word	0x08002329
 80022f8:	0800242d 	.word	0x0800242d
 80022fc:	0800242d 	.word	0x0800242d
 8002300:	0800242d 	.word	0x0800242d
 8002304:	08002369 	.word	0x08002369
 8002308:	0800242d 	.word	0x0800242d
 800230c:	0800242d 	.word	0x0800242d
 8002310:	0800242d 	.word	0x0800242d
 8002314:	080023ab 	.word	0x080023ab
 8002318:	0800242d 	.word	0x0800242d
 800231c:	0800242d 	.word	0x0800242d
 8002320:	0800242d 	.word	0x0800242d
 8002324:	080023eb 	.word	0x080023eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f920 	bl	8002574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0208 	orr.w	r2, r2, #8
 8002342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0204 	bic.w	r2, r2, #4
 8002352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6999      	ldr	r1, [r3, #24]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	619a      	str	r2, [r3, #24]
      break;
 8002366:	e062      	b.n	800242e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f966 	bl	8002640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6999      	ldr	r1, [r3, #24]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	021a      	lsls	r2, r3, #8
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	619a      	str	r2, [r3, #24]
      break;
 80023a8:	e041      	b.n	800242e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 f9af 	bl	8002714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0208 	orr.w	r2, r2, #8
 80023c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0204 	bic.w	r2, r2, #4
 80023d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69d9      	ldr	r1, [r3, #28]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	61da      	str	r2, [r3, #28]
      break;
 80023e8:	e021      	b.n	800242e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f9f9 	bl	80027e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69d9      	ldr	r1, [r3, #28]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	021a      	lsls	r2, r3, #8
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	61da      	str	r2, [r3, #28]
      break;
 800242a:	e000      	b.n	800242e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800242c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
	...

0800249c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a2d      	ldr	r2, [pc, #180]	; (8002564 <TIM_Base_SetConfig+0xc8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00f      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ba:	d00b      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a2a      	ldr	r2, [pc, #168]	; (8002568 <TIM_Base_SetConfig+0xcc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a29      	ldr	r2, [pc, #164]	; (800256c <TIM_Base_SetConfig+0xd0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d003      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a28      	ldr	r2, [pc, #160]	; (8002570 <TIM_Base_SetConfig+0xd4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d108      	bne.n	80024e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1e      	ldr	r2, [pc, #120]	; (8002564 <TIM_Base_SetConfig+0xc8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00f      	beq.n	800250e <TIM_Base_SetConfig+0x72>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d00b      	beq.n	800250e <TIM_Base_SetConfig+0x72>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <TIM_Base_SetConfig+0xcc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <TIM_Base_SetConfig+0x72>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1a      	ldr	r2, [pc, #104]	; (800256c <TIM_Base_SetConfig+0xd0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d003      	beq.n	800250e <TIM_Base_SetConfig+0x72>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a19      	ldr	r2, [pc, #100]	; (8002570 <TIM_Base_SetConfig+0xd4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d108      	bne.n	8002520 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a07      	ldr	r2, [pc, #28]	; (8002564 <TIM_Base_SetConfig+0xc8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d103      	bne.n	8002554 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	615a      	str	r2, [r3, #20]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	40012c00 	.word	0x40012c00
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800
 8002570:	40000c00 	.word	0x40000c00

08002574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	f023 0201 	bic.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0303 	bic.w	r3, r3, #3
 80025aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f023 0302 	bic.w	r3, r3, #2
 80025bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a1c      	ldr	r2, [pc, #112]	; (800263c <TIM_OC1_SetConfig+0xc8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d10c      	bne.n	80025ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f023 0308 	bic.w	r3, r3, #8
 80025d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a13      	ldr	r2, [pc, #76]	; (800263c <TIM_OC1_SetConfig+0xc8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d111      	bne.n	8002616 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	621a      	str	r2, [r3, #32]
}
 8002630:	bf00      	nop
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40012c00 	.word	0x40012c00

08002640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f023 0210 	bic.w	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f023 0320 	bic.w	r3, r3, #32
 800268a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <TIM_OC2_SetConfig+0xd0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d10d      	bne.n	80026bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a14      	ldr	r2, [pc, #80]	; (8002710 <TIM_OC2_SetConfig+0xd0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d113      	bne.n	80026ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	40012c00 	.word	0x40012c00

08002714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0303 	bic.w	r3, r3, #3
 800274a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800275c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <TIM_OC3_SetConfig+0xd0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d10d      	bne.n	800278e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800278c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <TIM_OC3_SetConfig+0xd0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d113      	bne.n	80027be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800279c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	621a      	str	r2, [r3, #32]
}
 80027d8:	bf00      	nop
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40012c00 	.word	0x40012c00

080027e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	031b      	lsls	r3, r3, #12
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <TIM_OC4_SetConfig+0x98>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d109      	bne.n	800285c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800284e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	019b      	lsls	r3, r3, #6
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	621a      	str	r2, [r3, #32]
}
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	40012c00 	.word	0x40012c00

08002884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2201      	movs	r2, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a1a      	ldr	r2, [r3, #32]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	401a      	ands	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a1a      	ldr	r2, [r3, #32]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	431a      	orrs	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	621a      	str	r2, [r3, #32]
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e04b      	b.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d00e      	beq.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a15      	ldr	r2, [pc, #84]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a13      	ldr	r2, [pc, #76]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d10c      	bne.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002956:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800
 8002994:	40000c00 	.word	0x40000c00

08002998 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e03d      	b.n	8002a30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
	...

08002a60 <__libc_init_array>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	2600      	movs	r6, #0
 8002a64:	4d0c      	ldr	r5, [pc, #48]	; (8002a98 <__libc_init_array+0x38>)
 8002a66:	4c0d      	ldr	r4, [pc, #52]	; (8002a9c <__libc_init_array+0x3c>)
 8002a68:	1b64      	subs	r4, r4, r5
 8002a6a:	10a4      	asrs	r4, r4, #2
 8002a6c:	42a6      	cmp	r6, r4
 8002a6e:	d109      	bne.n	8002a84 <__libc_init_array+0x24>
 8002a70:	f000 f822 	bl	8002ab8 <_init>
 8002a74:	2600      	movs	r6, #0
 8002a76:	4d0a      	ldr	r5, [pc, #40]	; (8002aa0 <__libc_init_array+0x40>)
 8002a78:	4c0a      	ldr	r4, [pc, #40]	; (8002aa4 <__libc_init_array+0x44>)
 8002a7a:	1b64      	subs	r4, r4, r5
 8002a7c:	10a4      	asrs	r4, r4, #2
 8002a7e:	42a6      	cmp	r6, r4
 8002a80:	d105      	bne.n	8002a8e <__libc_init_array+0x2e>
 8002a82:	bd70      	pop	{r4, r5, r6, pc}
 8002a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a88:	4798      	blx	r3
 8002a8a:	3601      	adds	r6, #1
 8002a8c:	e7ee      	b.n	8002a6c <__libc_init_array+0xc>
 8002a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a92:	4798      	blx	r3
 8002a94:	3601      	adds	r6, #1
 8002a96:	e7f2      	b.n	8002a7e <__libc_init_array+0x1e>
 8002a98:	08002b08 	.word	0x08002b08
 8002a9c:	08002b08 	.word	0x08002b08
 8002aa0:	08002b08 	.word	0x08002b08
 8002aa4:	08002b0c 	.word	0x08002b0c

08002aa8 <memset>:
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4402      	add	r2, r0
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d100      	bne.n	8002ab2 <memset+0xa>
 8002ab0:	4770      	bx	lr
 8002ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ab6:	e7f9      	b.n	8002aac <memset+0x4>

08002ab8 <_init>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	bf00      	nop
 8002abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002abe:	bc08      	pop	{r3}
 8002ac0:	469e      	mov	lr, r3
 8002ac2:	4770      	bx	lr

08002ac4 <_fini>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	bf00      	nop
 8002ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aca:	bc08      	pop	{r3}
 8002acc:	469e      	mov	lr, r3
 8002ace:	4770      	bx	lr
